{"version":3,"sources":["../src/http-handler.js"],"names":["verifyRequestSignature","createHTTPHandler","debug","errorCodes","SIGNATURE_VERIFICATION_FAILURE","REQUEST_TIME_FAILURE","BODY_PARSER_NOT_PERMITTED","signingSecret","requestSignature","requestTimestamp","body","fiveMinutesAgo","Math","floor","Date","now","error","Error","code","hmac","crypto","createHmac","split","version","hash","update","digest","adapter","poweredBy","sendResponse","res","_sendResponse","dispatchResult","status","content","statusCode","setHeader","end","JSON","stringify","parseBody","parsedBody","querystring","parse","payload","handleError","respond","message","process","env","NODE_ENV","userError","nextTick","slackRequestListener","req","method","url","rawBody","parseRawBody","Promise","resolve","then","r","toString","headers","ssl_check","dispatch","catch"],"mappings":"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","file":"http-handler.js","sourcesContent":["import debugFactory from 'debug';\nimport getRawBody from 'raw-body';\nimport querystring from 'querystring';\nimport crypto from 'crypto';\nimport timingSafeCompare from 'tsscmp';\nimport { packageIdentifier } from './util';\n\nconst debug = debugFactory('@slack/interactive-messages:http-handler');\n\nexport const errorCodes = {\n  SIGNATURE_VERIFICATION_FAILURE: 'SLACKHTTPHANDLER_REQUEST_SIGNATURE_VERIFICATION_FAILURE',\n  REQUEST_TIME_FAILURE: 'SLACKHTTPHANDLER_REQUEST_TIMELIMIT_FAILURE',\n  BODY_PARSER_NOT_PERMITTED: 'SLACKADAPTER_BODY_PARSER_NOT_PERMITTED_FAILURE',\n};\n\n/**\n * Method to verify signature of requests\n *\n * @param {string} signingSecret - Signing secret used to verify request signature\n * @param {string} requestSignature - Signature from request 'x-slack-signature' header\n * @param {number} requestTimestamp - Timestamp from request 'x-slack-request-timestamp' header\n * @param {string} body - Raw body string\n * @returns {boolean} Indicates if request is verified\n */\nexport function verifyRequestSignature({\n  signingSecret, requestSignature, requestTimestamp, body,\n}) {\n  // Divide current date to match Slack ts format\n  // Subtract 5 minutes from current time\n  const fiveMinutesAgo = Math.floor(Date.now() / 1000) - (60 * 5);\n\n  if (requestTimestamp < fiveMinutesAgo) {\n    debug('request is older than 5 minutes');\n    const error = new Error('Slack request signing verification outdated');\n    error.code = errorCodes.REQUEST_TIME_FAILURE;\n    throw error;\n  }\n\n  const hmac = crypto.createHmac('sha256', signingSecret);\n  const [version, hash] = requestSignature.split('=');\n  hmac.update(`${version}:${requestTimestamp}:${body}`);\n\n  if (!timingSafeCompare(hash, hmac.digest('hex'))) {\n    debug('request signature is not valid');\n    const error = new Error('Slack request signing verification failed');\n    error.code = errorCodes.SIGNATURE_VERIFICATION_FAILURE;\n    throw error;\n  }\n\n  debug('request signing verification success');\n  return true;\n}\n\nexport function createHTTPHandler(adapter) {\n  const poweredBy = packageIdentifier();\n\n  /**\n   * Handles sending responses\n   *\n   * @param {Object} res - Response object\n   * @returns {Function} Returns a function used to send response\n   */\n  function sendResponse(res) {\n    return function _sendResponse(dispatchResult) {\n      const { status, content } = dispatchResult;\n      res.statusCode = status;\n      res.setHeader('X-Slack-Powered-By', poweredBy);\n      if (typeof content === 'string') {\n        res.end(content);\n      } else if (content) {\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify(content));\n      } else {\n        res.end();\n      }\n    };\n  }\n\n  /**\n   * Parses raw bodies of requests\n   *\n   * @param {string} body - Raw body of request\n   * @returns {Object} Parsed body of the request\n   */\n  function parseBody(body) {\n    const parsedBody = querystring.parse(body);\n    if (parsedBody.payload) {\n      return JSON.parse(parsedBody.payload);\n    }\n\n    return parsedBody;\n  }\n\n\n  /**\n   * Abstracts error handling.\n   *\n   * @param {Error} error\n   * @param {Function} respond\n   */\n  function handleError(error, respond) {\n    debug('handling error - message: %s, code: %s', error.message, error.code);\n    try {\n      if (error.code === errorCodes.SIGNATURE_VERIFICATION_FAILURE ||\n          error.code === errorCodes.REQUEST_TIME_FAILURE) {\n        respond({ status: 404 });\n      } else if (process.env.NODE_ENV === 'development') {\n        respond({ status: 500, content: error.message });\n      } else {\n        respond({ status: 500 });\n      }\n    } catch (userError) {\n      process.nextTick(() => { throw userError; });\n    }\n  }\n\n  /**\n   * Request listener used to handle Slack requests and send responses and\n   * verify request signatures\n   *\n   * @param {Object} req - Request object\n   * @param {Object} res - Response object\n   */\n  return function slackRequestListener(req, res) {\n    debug('request received - method: %s, path: %s', req.method, req.url);\n\n    // Bind a response function to this request's respond object.\n    const respond = sendResponse(res);\n\n    // If parser is being used and we don't receive the raw payload via `rawBody`,\n    // we can't verify request signature\n    if (req.body && !req.rawBody) {\n      const error = new Error('Parsing request body prohibits request signature verification');\n      error.code = errorCodes.BODY_PARSER_NOT_PERMITTED;\n      handleError(error, respond);\n      return;\n    }\n\n    // Some serverless cloud providers (e.g. Google Firebase Cloud Functions) might populate\n    // the request with a bodyparser before it can be populated by the SDK.\n    // To prevent throwing an error here, we check the `rawBody` field before parsing the request\n    // through the `raw-body` module (see Issue #85 - https://github.com/slackapi/node-slack-events-api/issues/85)\n    let parseRawBody;\n    if (req.rawBody) {\n      debug('Parsing request with a rawBody attribute');\n      parseRawBody = new Promise((resolve) => {\n        resolve(req.rawBody);\n      });\n    } else {\n      debug('Parsing raw request');\n      parseRawBody = getRawBody(req);\n    }\n\n    parseRawBody\n      .then((r) => {\n        const rawBody = r.toString();\n\n        if (verifyRequestSignature({\n          signingSecret: adapter.signingSecret,\n          requestSignature: req.headers['x-slack-signature'],\n          requestTimestamp: req.headers['x-slack-request-timestamp'],\n          body: rawBody,\n        })\n        ) {\n          // Request signature is verified\n          // Parse raw body\n          const body = parseBody(rawBody);\n\n          if (body.ssl_check) {\n            respond({ status: 200 });\n            return;\n          }\n\n          const dispatchResult = adapter.dispatch(body);\n\n          if (dispatchResult) {\n            dispatchResult.then(respond);\n          } else {\n            // No callback was matched\n            debug('no callback was matched');\n            respond({ status: 404 });\n          }\n        }\n      }).catch((error) => {\n        if (error.code === errorCodes.SIGNATURE_VERIFICATION_FAILURE ||\n            error.code === errorCodes.REQUEST_TIME_FAILURE) {\n          respond({ status: 404 });\n        } else if (process.env.NODE_ENV === 'development') {\n          respond({ status: 500, content: error.message });\n        } else {\n          respond({ status: 500 });\n        }\n      });\n  };\n}\n"]}